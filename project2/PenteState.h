#pragma Once

#include <array>
#include <boost/multiprecision/cpp_int.hpp>
#include <string>
#include <unordered_map>
#include <vector>

using uint512_t = boost::multiprecision::uint512_t;
using Position = std::array<int, 2>;

class PenteState {
public:
  PenteState();

  int getState(Position position) const; // 1=black, -1=white, 0=unoccupied
  int getTurn() const;
  Position numCaptures() const;

  int winner() const; // 1 = black, 0 = draw, -1 = white
  bool gameOver() const;

  std::vector<Position> actions() const;
  std::vector<Position> winningMoves() const;
  std::vector<Position> blockingMoves() const;
  std::vector<Position> pieceNeighborhood(int radius) const;

  int captureCount(Position position) const;

  PenteState result(Position action) const;

  int patternCount(std::string pattern) const;
  std::vector<Position> patternLocation(std::string pattern) const;

  void display() const;

  std::tuple<int, int, int, uint512_t, uint512_t> fullState() const;

  double evaluate(int passes) const;

  bool operator<(const PenteState &other) const;

private:
  void _setState(Position position, int state);

private:
  int _turn{ 0 };
  int _blackCaptures{ 0 }, _whiteCaptures{ 0 };
  uint512_t _white{ 0 }, _black{ 0 };
};
